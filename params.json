{"name":"Collection-json-parser","tagline":"A library for reading and writing JSON in collection+json format","body":"collection-json-parser\r\n======================\r\n\r\nCollection-JSON-parser is a small library for reading and writing JSON in [collection+json](https://github.com/mamund/collection-json) (from @mamund) format.\r\nIt was born because I wanted to build a prototype for the office and was in need of pet-project.\r\n\r\nThe library provides a Java model for `Collections`, `Queries`, `Tempaltes`, `Items` and Data from Cj.\r\nFuthermore it provives a `Serializer` which converts any of the above mentioned classes to and from JSON.\r\n\r\nFor people building a client that uses Cj, the library provides a `CjClient` which takes care of building requests\r\nand parsing responses. Users will need to implement a small `HTTPClient` which is used by the `CjClient` to handle\r\ncommunication.\r\n\r\nTo make building of `Collections` easier, a set of builders are provided.\r\n\r\nFinally, to convert between `Items` in a `Collection` and your domain model, the library makes use of `Transformers`.\r\n\r\n\r\nGetting started\r\n-----------------\r\n\r\nTo use the library in your project you need to clone it\r\n\r\n`git clone https://github.com/felipesere/collection-json-parser.git`\r\n\r\nand then build it with Maven\r\n\r\n`maven clean install`\r\n\r\n\r\nthen add it as a dependency to your Maven project using the following coordinates\r\n\r\n```\r\n<dependency>\r\n   <groupId>de.fesere.hypermedia</groupId>\r\n   <artifactId>collection-json-parser</artifactId>\r\n   <version>0.0.1-SNAPSHOT</version>\r\n</dependency>\r\n```\r\n\r\nThen you can proceed to create your own collections of read them from Strings.\r\n\r\n\r\nUsing `collection-json-parser` to read\r\n---------------------------------------\r\n\r\nThe tests in `/src/main/test/java` mostly show how to use the library.\r\n\r\nIn a gist, the usage pattern is the following:\r\nIf you receive a `String` containing a `Collection` in JSON, you can serialize it as such:\r\n\r\n```Java\r\nString json = \"...\";\r\nSerializer serializer = new Serializer();\r\n\r\nCollection collection = serializer.deserialize(json, Collection.class);\r\n```\r\n\r\nIf you then want to extract the `Items` and convert them to some domain object, e.g. `Foo`,\r\nyou have to implement the `ReadTransformer<T>` interface and pass it to the convert method:\r\n\r\n```Java\r\nFooTransformer fooTransformer = new FooTransfomer();\r\nList<Foo> foos = collection.transform(fooTransformer);\r\n```\r\n\r\nThe implementation of `FooTransformer` get each `Item` of the `Collection` one at a time.\r\nIt should use the methods on `Item` to extract values.\r\nThe methods are:\r\n\r\n*  `getString(String name)` to get a `String` value\r\n*  `getInt(Stirng name)`to get an `int`\r\n*  `getDouble(String name)` to get a `double`\r\n\r\nThese methods throw an `ElementNotFoundException` if no element named `name` is found\r\nand both `getInt` and `getDouble` throw a `MalformedDataValueException` if the value\r\ncan not be properly converted.\r\n\r\n\r\nUsing `collection-json-parser` to write\r\n-----------------------------------------\r\n\r\nWriting a `Collection`is fairly easy.\r\nSimply use the differnet builders in `de.fesere.hypermedia.cj.model.builder` to construct the differnet objects.\r\n\r\nFor example, if you want to create a `Collection` with a single `Item` and two `Links`, you could the follwing\r\n\r\n```Java\r\nCollectionBuilder collectionBuilder = new CollectionBuilder(URI.create(\"http://example.com\"));\r\ncollectionBuilder.getLinkBuilder().addLink(\"documentation\",\"/documentation/v1\")\r\n                                  .addLink(\"questions\", URI.create(\"http://stackoverflow.com\")).build();\r\n\r\nItemBuilder itemBuilder = new ItemBuilder(URI.create(\"http;//example.com/item/1\"));\r\nitemBuilder.addData(new DataEntry(\"name\", \"Bob\", \"Users first name\"));\r\nCollection collection = collectionBuilder.addItem(itemBuilder.build()).build();\r\n\r\nSerializer serializer = new Serializer();\r\nSystem.out.println(serializer.serialize(collection));\r\n```\r\n\r\nwhich would result in\r\n\r\n```JSON\r\n{\r\n  \"version\" : \"1.0\",\r\n  \"href\" : \"http://example.com\",\r\n  \"links\" : [ {\r\n    \"rel\" : \"documentation\",\r\n    \"href\" : \"http://example.com/documentation/v1\"\r\n  }, {\r\n    \"rel\" : \"questions\",\r\n    \"href\" : \"http://stackoverflow.com\"\r\n  } ],\r\n  \"items\" : [ {\r\n    \"href\" : \"http;//example.com/item/1\",\r\n    \"data\" : [ {\r\n      \"name\" : \"name\",\r\n      \"value\" : \"Bob\",\r\n      \"prompt\" : \"Users first name\"\r\n    } ],\r\n    \"links\" : [ ]\r\n  } ]\r\n}\r\n```\r\n\r\n\r\n\r\n\r\nBuild status:\r\n-------------\r\n\r\n| Branch | Status |\r\n| ------ | ------ |\r\n|   Development | [![Build Status](https://travis-ci.org/felipesere/collection-json-parser.png?branch=develop)](https://travis-ci.org/felipesere/collection-json-parser) |\r\n| Master:     | [![Build Status](https://travis-ci.org/felipesere/collection-json-parser.png?branch=master)](https://travis-ci.org/felipesere/collection-json-parser)    |","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}